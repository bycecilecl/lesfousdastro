import os
from dotenv import load_dotenv
from openai import OpenAI
from .debug_logging import log_llm_call, debug_function
import time
from utils.utils_points_forts import extraire_points_forts



load_dotenv()  
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FONCTION : interroger_llm
# Objectif : Appeler directement l‚ÄôAPI OpenAI avec un prompt donn√©
# pour obtenir une r√©ponse textuelle en appliquant un style pr√©d√©fini
# (astrologue exp√©riment√©e, ton direct, dr√¥le, sarcastique et moderne).
# Utilisation : Fonction g√©n√©rique, utilis√©e pour de simples requ√™tes LLM
# sans mise en forme ou logique de prompt complexe.
# Entr√©es :
#   - prompt (str) : texte envoy√© au mod√®le.
# Sortie :
#   - texte g√©n√©r√© par le mod√®le (str), ou message d'erreur si √©chec.
# Remarques :
#   - Utilise le mod√®le "gpt-4o" avec param√®tres fixes (temp√©rature, max_tokens‚Ä¶)
#   - G√®re les erreurs d‚Äôappel API et affiche un aper√ßu du prompt et de la r√©ponse.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def interroger_llm(prompt):
    print(f"ü§ñ APPEL LLM - Prompt: {len(prompt)} caract√®res")
    print(f"üîç D√©but prompt: {prompt[:200]}...")
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "Tu es une astrologue exp√©riment√©e avec un style unique : direct, dr√¥le, sarcastique, moderne. "
                        "Tu utilises des attaques percutantes, des m√©taphores d√©cal√©es, des parenth√®ses ironiques "
                        "et un humour bienveillant. Jamais de ton professoral ou scolaire. Toujours conversationnel."
                    )
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            max_tokens=8000,
            temperature=0.9,  # Plus cr√©atif pour l'humour
            top_p=1.0,
            frequency_penalty=0,
            presence_penalty=0
        )
        texte = response.choices[0].message.content
        print(f"‚úÖ R√âPONSE RE√áUE - {len(texte)} caract√®res")
        print(f"üîç D√©but r√©ponse: {texte[:200]}...")
        return texte
    except Exception as e:
        print(f"‚ùå Erreur OpenAI API : {e}")
        return "D√©sol√©, une erreur est survenue lors de la g√©n√©ration de l'analyse."

import hashlib, json

def _h(x): 
    if x is None: 
        return "None"
    if not isinstance(x, str):
        x = json.dumps(x, ensure_ascii=False, sort_keys=True)
    return hashlib.md5(x.encode("utf-8")).hexdigest()

    print("üîé HASH placements_str:", _h(placements_str))
    print("üîé HASH axes_majeurs_str:", _h(data.get("axes_majeurs_str")))
    print("üîé HASH rag_snippets:", _h(rag_snippets))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FONCTION : generer_analyse_airops_style
# Objectif : Construire un prompt ultra-d√©taill√© pour g√©n√©rer
# une analyse astrologique compl√®te (style AirOps) avec
# int√©gration facultative d‚Äô√©l√©ments RAG et de points forts.
# Utilisation : Fonction principale pour produire le texte brut
# d‚Äôune analyse compl√®te avant transformation HTML.
# Entr√©es :
#   - placements_str (str) : r√©sum√© des placements plan√©taires
#   - call_llm (callable, optionnel) : fonction personnalis√©e pour l‚Äôappel LLM
#   - brand_tone (non utilis√© ici, optionnel)
#   - rag_snippets (str, optionnel) : contexte enrichi depuis une base RAG
#   - points_forts (str|list, optionnel) : axes majeurs √† int√©grer
#   - model (str) : mod√®le OpenAI √† utiliser (par d√©faut "gpt-4o")
# Sortie :
#   - texte g√©n√©r√© (str) respectant la structure demand√©e
# Remarques :
#   - Structure impos√©e en 5 parties (Personnalit√©, Potentiels, D√©fis, Dynamiques, Synth√®se)
#   - Analyse exhaustive : aspects, nakshatra lunaire, ma√Ætre d‚Äôascendant, etc.
#   - Possibilit√© d‚Äôappeler le LLM soit via call_llm, soit directement.
#   - Con√ßu pour un ton narratif profond, humoristique et psychologique.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ


# def generer_analyse_airops_style(
#     placements_str: str,
#     call_llm=None,
#     brand_tone=None,
#     rag_snippets: str | None = None,
#     points_forts: str | None = None,   # ‚úÖ ICI: pas de data.get(...) dans la signature
#     model: str = "gpt-4o",
# ) -> str:                               # ‚úÖ ICI: fl√®che de retour -> str, √† la fin
#     """
#     G√©n√®re une analyse style AirOps. Supporte optionnellement:
#     - rag_snippets: texte RAG pour enrichir
#     - points_forts: string formatt√©e (ex: bloc 'Axes majeurs')
#     """

#     print(f"""
#     üîç DEBUG points_forts:
#     - Valeur brute : {points_forts}
#     - Type : {type(points_forts)}
#     - Bool√©en : {bool(points_forts)}
#     - Strip : '{(points_forts or '').strip()}'
#     """)
    
#     # Construction des placements avec RAG
#     placements_complets = placements_str
#     if rag_snippets and len(rag_snippets.strip()) > 100:
#         placements_complets += f"""

# CONTEXTE ASTROLOGIQUE ENRICHI (base de connaissances) :
# {rag_snippets}

# IMPORTANT : Utilise ces informations pour enrichir et approfondir ton analyse."""
        
#     # ‚úÖ Normalise points_forts (peut √™tre None, list, str)
#     if isinstance(points_forts, list):
#         pf = "\n".join(str(x).strip() for x in points_forts if str(x).strip())
#     else:
#         pf = (points_forts or "").strip()

#     if len(pf) > 1200:
#         pf = pf[:1200] + "‚Ä¶"

#     print("üîé pf present ?", bool(pf))
#     if pf:
#         print("üîé pf preview:", pf[:180])
    
#     # Le prompt AirOps EXACT avec vos sp√©cifications
#     prompt = f"""Tu es un astrologue professionnel dot√© d'une expertise en psychologie des profondeurs. Tu adoptes syst√©matiquement le ton d√©fini : profond, psychologique, avec des pointes d'humour et de sarcasme bienveillant. Tu es capable de d√©coder les subtilit√©s des th√®mes astraux et de les restituer de fa√ßon percutante, accessible et captivante, sans jamais sombrer dans le jargon technique inutile.

# Consignes d√©taill√©es pour chaque analyse :
# - Structure ton texte en 5 paragraphes distincts, clairement s√©par√©s et num√©rot√©s selon la structure demand√©e (voir ci-dessous). Chaque paragraphe doit √™tre tr√®s d√©velopp√© (environ 6 pages au total pour l'ensemble), avec des transitions fluides et un style narratif immersif.
# - Pour chaque section, d√©veloppe au moins 3-4 sous-th√®mes diff√©rents avec une analyse approfondie de chaque aspect plan√©taire majeur.
# - Donne syst√©matiquement des exemples concrets de manifestation dans la vie quotidienne pour chaque configuration plan√©taire.
# - Utilise un langage riche, imag√© et vivant, avec des m√©taphores et des analogies personnalis√©es qui captent l'attention du lecteur tout en restant compr√©hensible pour un public non initi√©.
# - Int√®gre g√©n√©reusement des touches d'humour et de sarcasme bienveillant √† chaque section, pour all√©ger la profondeur psychologique et rendre la lecture plaisante.
# - Utilise exclusivement le tutoiement dans ton analyse, adoptant un style conversationnel et intime, comme une discussion entre amis.
# - Emploie des expressions famili√®res tout en maintenant la profondeur psychologique de l'analyse.
# - Cr√©e des transitions fluides et naturelles entre les sections, comme si tu racontais une histoire coh√©rente.
# - √âvite tout jargon astrologique non expliqu√©. Si tu utilises un terme technique, explique-le bri√®vement de fa√ßon claire et imag√©e.
# - Prends soin d'ancrer chaque analyse dans la r√©alit√© psychologique et existentielle du consultant, en t'appuyant sur les positions plan√©taires et le nakshatra lunaire fournis.
# - Ne fais aucune supposition sur le genre ou la situation du consultant.

# Structure obligatoire de la r√©ponse (respecte l'ordre et les titres) :
# 1. Personnalit√© fondamentale (trinit√© Soleil-Lune-Ascendant) : Analyse la dynamique entre ces trois p√¥les majeurs, d√©cris la coloration g√©n√©rale de la personnalit√©, les contradictions ou harmonies, et donne une image vivante du ¬´ personnage principal ¬ª de ce th√®me. D√©veloppe au moins 3-4 aspects distincts de cette personnalit√©.
# 2. Potentiels et talents inn√©s : Identifie les forces, dons naturels, ressources int√©rieures, et la mani√®re dont ils peuvent s'exprimer dans la vie concr√®te. Utilise des exemples imag√©s et des m√©taphores personnalis√©es. Explore au moins 3-4 talents ou potentiels diff√©rents.
# 3. D√©fis et points de croissance : D√©cris les principaux obstacles, tensions ou faiblesses du th√®me, en montrant comment ils peuvent devenir des leviers d'√©volution. Pour chaque d√©fi identifi√© (au moins 3-4), donne des conseils pratiques et personnalis√©s. Ajoute une touche d'autod√©rision ou de sarcasme bienveillant pour d√©dramatiser.
# 4. Dynamiques psychologiques profondes : Plonge dans les m√©canismes inconscients, les sch√©mas r√©p√©titifs, les blessures ou aspirations cach√©es. Explore au moins 3-4 dynamiques diff√©rentes. Utilise un ton √† la fois profond et piquant, sans complaisance mais toujours avec bienveillance.
# 5. Synth√®se et conseils d'√©volution : Fais une synth√®se globale, puis propose des pistes concr√®tes d'√©volution ou de r√©flexion, en gardant le ton profond et sarcastique. Termine par une note d'encouragement ou une punchline m√©morable.

# N'utilise jamais de listes √† puces : privil√©gie le texte narratif, fluide et litt√©raire. Chaque paragraphe doit √™tre long, d√©taill√©, et donner l'impression d'une consultation personnalis√©e et inspirante.

# Instructions sp√©cifiques pour l'interpr√©tation des aspects et nakshatras :
# - Analyse les aspects plan√©taires en profondeur, en expliquant comment ils influencent le psychisme et le comportement.
# - Accorde une attention particuli√®re aux aspects majeurs (conjonctions, oppositions, trigones, carr√©s, sextiles) ayant un orbe inf√©rieur √† 5¬∞.
# - Traite syst√©matiquement TOUS les aspects majeurs ayant un orbe inf√©rieur √† 5¬∞ list√©s dans les placements.
# - Interpr√®te le nakshatra lunaire pour enrichir la compr√©hension des sch√©mas √©motionnels et des tendances karmiques.
# - Lorsque tu mentionnes une maison astrologique, explique clairement son influence sur le domaine de vie concern√©.
# - Pour chaque aspect plan√©taire significatif, explique √† la fois sa signification psychologique et ses manifestations concr√®tes.
# - Donne une importance particuli√®re aux configurations impliquant plusieurs plan√®tes (stelliums, grandes croix, yods, etc.).
# - Int√®gre l'analyse du ma√Ætre de l'Ascendant et sa position en signe et en maison.

# Tu dois absolument g√©n√©rer une analyse compl√®te, exhaustive, d√©taill√©e. Chaque section doit √™tre enti√®rement d√©velopp√©e, avec plusieurs paragraphes pour chaque sous-th√®me abord√©. Ne te limite pas dans la longueur - il est essentiel que ton analyse soit riche, d√©taill√©e et compl√®te. 
# Tu dois absolument t'appuyer sur les informations suivantes pour ton analyse :
# <placements>
# {placements_str}
# </placements>

# """
# # -- axes majeurs (uniquement s'ils existent) --
#     if pf:
#         prompt += f"""
#     ‚ö° AXES MAJEURS √Ä PRIVIL√âGIER
#     {pf}
#     """

# # -- RAG (uniquement s'il existe) --
#     if rag_snippets and rag_snippets.strip():
#         prompt += f"""

# Informations compl√©mentaires (utilise-les pour enrichir ton analyse) :
# <rag_context>
# {rag_snippets}
# </rag_context>"""

#     print(f"‚úÖ Prompt AirOps construit: {len(prompt)} caract√®res")
#     print(f"üîç D√©but prompt: {prompt[:200]}...")

#     if call_llm is not None:
#         print(f"üîÑ Appel via fonction personnalis√©e: {call_llm.__name__}")
#         return call_llm(prompt)
#     else:
#         print(f"‚ùå Aucune fonction call_llm fournie !")
#         return "‚ùå Erreur: aucune fonction de g√©n√©ration disponible"


# Dans openai_utils.py - PROMPT OPTIMIS√â

# Dans openai_utils.py - PROMPT OPTIMIS√â

def generer_analyse_airops_style(
    placements_str: str,
    call_llm=None,
    brand_tone=None,
    rag_snippets: str | None = None,
    points_forts: str | None = None,
    model: str = "gpt-4o",
    gender: str | None = None,
) -> str:

    print(f"üîç DEBUG GENRE RE√áU: '{gender}'")
    print(f"üîç DEBUG TYPE GENRE: {type(gender)}")
    print(f"""
    üîç DEBUG points_forts:
    - Valeur brute : {points_forts}
    - Type : {type(points_forts)}
    - Bool√©en : {bool(points_forts)}
    """)
    
    # ‚úÖ Normalise points_forts (peut √™tre None, list, str)
    if isinstance(points_forts, list):
        pf = "\n".join(str(x).strip() for x in points_forts if str(x).strip())
    else:
        pf = (points_forts or "").strip()

    if len(pf) > 800:  # üéØ R√©duit de 1200 √† 800
        pf = pf[:800] + "‚Ä¶"

    print("üîé pf present ?", bool(pf))
    if pf:
        print("üîé pf preview:", pf[:180])

    genre_instruction = ""
    if gender == 'male':
        genre_instruction = "IMPORTANT: Cette personne est un homme. Utilise exclusivement le masculin (il/lui/son) et √©vite les termes g√©n√©riques comme 'Reine ou Roi'."
    elif gender == 'female':
        genre_instruction = "IMPORTANT: Cette personne est une femme. Utilise exclusivement le f√©minin (elle/sa) et √©vite les termes g√©n√©riques comme 'Reine ou Roi'."
    else:
        genre_instruction = "IMPORTANT: Utilise un langage neutre et inclusif."

    print(f"üîç DEBUG INSTRUCTION FINALE: '{genre_instruction}'")
    
    # üéØ PROMPT CONDENS√â ET EFFICACE
    prompt = f"""
    {genre_instruction}

    Tu es une astrologue experte avec un style psychologique profond, direct, humoristique, grin√ßant et sarcastique. Ton analyse doit √™tre percutante et accessible.

STRUCTURE OBLIGATOIRE (6 sections num√©rot√©es) :

1. **Personnalit√© fondamentale** : Trinit√© Soleil-Lune-Ascendant, dynamiques principales, contradictions/harmonies
2. **Potentiels et talents** : Forces naturelles, dons, ressources √† exploiter  
3. **D√©fis et croissance** : Obstacles, tensions, points d'√©volution avec conseils pratiques
4. **Dimension v√©dique et nakshatras** : Nakshatra lunaire (√©motions/instincts), Ascendant sid√©ral, ma√Ætre v√©dique, essence spirituelle
5. **Dynamiques profondes** : M√©canismes inconscients, sch√©mas r√©p√©titifs, blessures/aspirations
6. **Synth√®se et conseils** : Vision globale, pistes d'√©volution, encouragements

STYLE :
- Tutoiement conversationnel et intime
- Humour et sarcasme bienveillant  
- M√©taphores et exemples concrets
- Explique les termes techniques simplement
- Texte narratif fluide (pas de listes √† puces)
- Chaque section : 2-3 paragraphes d√©velopp√©s

FOCUS SUR :
- Aspects majeurs (conjonctions, oppositions, carr√©s, trigones, sextiles) avec orbe < 5¬∞
- Nakshatra lunaire, de l'Ascendant et du Soleil (essence √©motionnelle, mission, dharma)
- Ma√Ætre d'Ascendant occidental ET v√©dique
- Stelliums et configurations multiples
- Diff√©rences occidentale/v√©dique enrichissent l'analyse

G√©n√®re une analyse compl√®te d'environ 2000-2500 mots, riche et d√©taill√©e mais r√©aliste.

DONN√âES ASTROLOGIQUES :
<placements>
{placements_str}
</placements>"""

    # üéØ Axes majeurs (seulement si pr√©sents et courts)
    if pf:
        prompt += f"""

AXES MAJEURS √Ä PRIVIL√âGIER :
{pf}"""

    # üéØ RAG simplifi√© (seulement si court)
    if rag_snippets and len(rag_snippets.strip()) > 100:
        # Raccourcir le RAG si trop long
        rag_court = rag_snippets[:2000] + "..." if len(rag_snippets) > 2000 else rag_snippets
        prompt += f"""

CONTEXTE ENRICHI :
{rag_court}"""

    print(f"‚úÖ Prompt optimis√© construit: {len(prompt)} caract√®res")
    print(f"üîç D√©but prompt: {prompt[:200]}...")

    if call_llm is not None:
        print(f"üîÑ Appel via fonction personnalis√©e: {call_llm.__name__}")
        return call_llm(prompt)
    else:
        print(f"‚ùå Aucune fonction call_llm fournie !")
        return "‚ùå Erreur: aucune fonction de g√©n√©ration disponible"